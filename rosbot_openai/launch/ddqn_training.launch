<?xml version="1.0" encoding="UTF-8"?>
<launch>

    <!-- Start of Simulation -->
    <!-- <include file="$(find rosbot_gazebo)/launch/wall_world.launch" />-->
    <include file="$(find rosbot_openai)/worlds/first_stage_5x5.launch" />
    <include file="$(find rosbot_description)/launch/rosbot_gazebo.launch"/>
    <param name="use_sim_time" value="true" />
    
 
    <!-- <node pkg="tf" type="static_transform_publisher" name="laser_broadcaster" args="0 0 0.1 3.14 0 0 base_link laser_frame 100" /> -->

    <node pkg="rviz" type="rviz" name="rviz"/>


    <node pkg="laser_filters" type="scan_to_scan_filter_chain" output="screen" name="laser_filter">
      <rosparam command="load" file="$(find rosbot_openai)/laser_filter_config/180_degree_filter.yaml" />
    </node>


    <!-- This version uses the openai_ros environments -->
    <rosparam command="load" file="$(find rosbot_openai)/config/husarion_walldodge_qlearn_params.yaml" />
    <!-- Launch the training system -->
    <node pkg="rosbot_openai" name="husarion_wall_ddqn_learn" type="DDQN.py" output="screen"/>
 
    <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="hector_trajectory_server" output="screen">
    	<param name="target_frame_name" type="string" value="odom" />
    	<param name="source_frame_name" type="string" value="base_link" />
    	<param name="trajectory_update_rate" type="double" value="4" />
    	<param name="trajectory_publish_rate" type="double" value="0.25" />
    </node>

</launch>
